// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="InstantSearchClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class LibraryVersion;
@class NSOperationQueue;
@class NSOperation;

/// An abstract API client.
/// warning:
/// Not meant to be used directly. See <code>Client</code> or <code>PlacesClient</code> instead.
/// <h2>Stateful hosts</h2>
/// In order to avoid hitting timeouts at every request when one or more hosts are not working properly (whatever the
/// reason: DNS failure, no route to host, server down…), the client maintains a <em>known status</em> for each host.
/// That status can be either <em>up</em>, <em>down</em> or <em>unknown</em>. Initially, all hosts are in the <em>unknown</em> state. Then a given
/// host’s status is updated whenever a request to it returns a response or an error.
/// When a host is flagged as <em>down</em>, it will not be considered for subsequent requests. However, to avoid discarding
/// hosts permanently, statuses are only remembered for a given timeframe, indicated by <code>hostStatusTimeout</code>. (You may
/// adjust it as needed, although the default value <code>defaultHostStatusTimeout</code> should make sense for most applications.)
SWIFT_CLASS("_TtC19InstantSearchClient14AbstractClient")
@interface AbstractClient : NSObject
/// HTTP headers that will be sent with every request.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
/// Algolia API key.
/// note:
/// Optional version, for internal use only.
@property (nonatomic, copy) NSString * _Nullable _apiKey;
/// note:
/// Maximum size for an API key to be sent in the HTTP headers. Bigger keys will go inside the body
@property (nonatomic, readonly) NSInteger _maxAPIKeyLength;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull xAlgoliaAPIKey;)
+ (NSString * _Nonnull)xAlgoliaAPIKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bodyApiKey;)
+ (NSString * _Nonnull)bodyApiKey SWIFT_WARN_UNUSED_RESULT;
/// The list of libraries used by this client.
/// warning:
/// Deprecated. Now a static property of the <code>Client</code> class. The instance properties are just an alias
/// for the static property.
@property (nonatomic, readonly, copy) NSArray<LibraryVersion *> * _Nonnull userAgents;
/// The list of libraries used by instances of this class.
/// They are passed in the <code>User-Agent</code> HTTP header of every request.
/// It is initially set to contain only this library and the OS, but may be overridden to include other libraries.
/// warning:
/// The user agent is crucial to proper statistics in your Algolia dashboard. Please leave it as is.
/// This field is publicly exposed only for the sake of other Algolia libraries.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<LibraryVersion *> * _Nonnull userAgents;)
+ (NSArray<LibraryVersion *> * _Nonnull)userAgents SWIFT_WARN_UNUSED_RESULT;
/// Precomputed <code>User-Agent</code> header (cached for improved performance).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable userAgentHeader;)
+ (NSString * _Nullable)userAgentHeader SWIFT_WARN_UNUSED_RESULT;
/// Default timeout for network requests. Default: 30 seconds.
@property (nonatomic) NSTimeInterval timeout;
/// Specific timeout for search requests. Default: 5 seconds.
@property (nonatomic) NSTimeInterval searchTimeout;
/// Algolia application ID.
/// note:
/// Optional version, for internal use only.
@property (nonatomic, readonly, copy) NSString * _Nullable _appID;
/// Hosts for read queries, in priority order.
/// The first host will always be used, then subsequent hosts in case of retry.
/// warning:
/// The default values should be appropriate for most use cases.
/// Change them only if you know what you are doing.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull readHosts;
/// Hosts for write queries, in priority order.
/// The first host will always be used, then subsequent hosts in case of retry.
/// warning:
/// The default values should be appropriate for most use cases.
/// Change them only if you know what you are doing.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull writeHosts;
/// The timeout for host statuses.
@property (nonatomic) NSTimeInterval hostStatusTimeout;
/// GCD queue to synchronize access to <code>hostStatuses</code>.
@property (nonatomic, strong) dispatch_queue_t _Nonnull hostStatusQueue;
/// Operation queue used to keep track of network requests.
/// <code>Request</code> instances are inherently asynchronous, since they are merely wrappers around <code>NSURLSessionTask</code>.
/// The sole purpose of this queue is to retain them for the duration of their execution!
/// warning:
/// This queue must allow enough parallel executions to avoid stalling when the response time is high.
/// Because it’s merely a memory management tool, we don’t want it to be the limiting factor; <code>URLSession</code>
/// already has its own logic of connection pooling.
@property (nonatomic, readonly, strong) NSOperationQueue * _Nonnull onlineRequestQueue;
/// Operation queue used to run completion handlers.
/// Default = main queue.
/// note:
/// This will affect completion handlers of all methods on all indices attached to this client.
/// warning:
/// The queue is not retained by the client. You must ensure that it remains valid for the lifetime of
/// the client.
@property (nonatomic, weak) NSOperationQueue * _Nullable completionQueue;
/// The default timeout for host statuses.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSTimeInterval defaultHostStatusTimeout;)
+ (NSTimeInterval)defaultHostStatusTimeout SWIFT_WARN_UNUSED_RESULT;
/// Whether to use network reachability to decide if online requests should be attempted.
/// <ul>
///   <li>
///     When <code>true</code> (default), if the network reachability (as reported by the System Configuration framework) is
///     down, online requests will not be attempted and report to fail immediately.
///   </li>
///   <li>
///     When <code>false</code>, online requests will always be attempted (if the strategy involves them), even if the network
///     does not seem to be reachable.
///   </li>
/// </ul>
/// note:
/// Not available on watchOS (the System Configuration framework is not available there).
@property (nonatomic) BOOL useReachability;
- (nonnull instancetype)initWithAppID:(NSString * _Nullable)appID apiKey:(NSString * _Nullable)apiKey readHosts:(NSArray<NSString *> * _Nonnull)readHosts writeHosts:(NSArray<NSString *> * _Nonnull)writeHosts OBJC_DESIGNATED_INITIALIZER;
/// Set read and write hosts to the same value (convenience method).
/// warning:
/// The default values should be appropriate for most use cases.
/// Change them only if you know what you are doing.
- (void)setHosts:(NSArray<NSString *> * _Nonnull)hosts;
/// Set an HTTP header that will be sent with every request.
/// note:
/// You may also use the <code>headers</code> property directly.
/// \param name Header name.
///
/// \param value Value for the header. If <code>nil</code>, the header will be removed.
///
- (void)setHeaderWithName:(NSString * _Nonnull)name to:(NSString * _Nullable)value;
/// Get an HTTP header.
/// note:
/// You may also use the <code>headers</code> property directly.
/// \param name Header name.
///
///
/// returns:
/// The header’s value, or <code>nil</code> if the header does not exist.
- (NSString * _Nullable)headerWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Add a library version to the global list of user agents.
/// note:
/// It is safe to call this function multiple times. Adding an already existing library is a no-op.
/// \param libraryVersion Library version to add.
///
+ (void)addUserAgent:(LibraryVersion * _Nonnull)libraryVersion;
/// Ping the server.
/// This method returns nothing except a message indicating that the server is alive.
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)isAlive:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Filter a list of hosts according to the currently known statuses, keeping only those that are up or unknown.
/// \param hosts The list of hosts to filter.
///
///
/// returns:
/// A filtered list of hosts, or the original list if the result of filtering would be empty.
- (NSArray<NSString *> * _Nonnull)upOrUnknownHosts:(NSArray<NSString *> * _Nonnull)hosts SWIFT_WARN_UNUSED_RESULT;
/// Update the status for a given host.
/// \param host The name of the host to update.
///
/// \param up Whether the host is currently up (true) or down (false).
///
- (void)updateHostStatusWithHost:(NSString * _Nonnull)host up:(BOOL)up;
/// Decide whether a network request should be attempted in the current conditions.
///
/// returns:
/// <code>true</code> if a network request should be attempted, <code>false</code> if the client should fail fast with a
/// network error.
- (BOOL)shouldMakeNetworkCall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An abstract search query.
/// warning:
/// This class is not meant to be used directly. Please see <code>Query</code> or <code>PlacesQuery</code> instead.
/// <h2>KVO</h2>
/// Every parameter is observable via KVO under its own name.
SWIFT_CLASS("_TtC19InstantSearchClient13AbstractQuery")
@interface AbstractQuery : NSObject <NSCopying>
/// Parameters, as untyped values.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull parameters;
/// Get a parameter in an untyped fashion.
/// \param name The parameter’s name.
///
///
/// returns:
/// The parameter’s value, or nil if a parameter with the specified name does not exist.
- (NSString * _Nullable)parameterWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Set a parameter in an untyped fashion.
/// This low-level accessor is intended to access parameters that this client does not yet support.
/// \param name The parameter’s name.
///
/// \param value The parameter’s value, or nill to remove it.
///
- (void)setParameterWithName:(NSString * _Nonnull)name to:(NSString * _Nullable)value;
- (NSString * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)index SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(NSString * _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)index;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Construct an empty query.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Construct a query with the specified low-level parameters.
- (nonnull instancetype)initWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters OBJC_DESIGNATED_INITIALIZER;
/// Clear all parameters.
- (void)clear;
/// Support for <code>NSCopying</code>.
/// note:
/// Primarily intended for Objective-C use. Swift coders should use <code>init(copy:)</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
/// Return the final query string used in URL.
- (NSString * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Build a query string from a set of parameters.
+ (NSString * _Nonnull)buildWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// An asynchronous operation.
/// This class provides its subclasses the way to manually control <code>Operation</code>’s standard properties:
/// <ul>
///   <li>
///     <code>executing</code>
///   </li>
///   <li>
///     <code>finished</code>
///   </li>
///   <li>
///     <code>cancel</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC19InstantSearchClient14AsyncOperation")
@interface AsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
- (void)start;
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A specific type of async operation with a completion handler.
SWIFT_CLASS("_TtC19InstantSearchClient28AsyncOperationWithCompletion")
@interface AsyncOperationWithCompletion : AsyncOperation
- (void)start;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An asynchronous operation whose body is specified as a block.
SWIFT_CLASS("_TtC19InstantSearchClient19AsyncBlockOperation")
@interface AsyncBlockOperation : AsyncOperationWithCompletion
/// Start this request.
- (void)start;
@end



@class Index;
@class Query;

/// Iterator to browse all index content.
/// This helper takes care of chaining API requests and calling back the completion handler with the results, until:
/// <ul>
///   <li>
///     the end of the index has been reached;
///   </li>
///   <li>
///     an error has been encountered;
///   </li>
///   <li>
///     or the user cancelled the iteration.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC19InstantSearchClient14BrowseIterator")
@interface BrowseIterator : NSObject
/// The index being browsed.
@property (nonatomic, readonly, strong) Index * _Nonnull index;
/// The query used to filter the results.
@property (nonatomic, readonly, strong) Query * _Nonnull query;
/// Construct a new browse iterator.
/// note:
/// The iteration does not start automatically. You have to call <code>start()</code> explicitly.
/// \param index The index to be browsed.
///
/// \param query The query used to filter the results.
///
/// \param completionHandler Handler called for each page of results.
///
- (nonnull instancetype)initWithIndex:(Index * _Nonnull)index query:(Query * _Nonnull)query completionHandler:(void (^ _Nonnull)(BrowseIterator * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler OBJC_DESIGNATED_INITIALIZER;
/// Start the iteration.
- (void)start;
/// Cancel the iteration.
/// This cancels any currently ongoing request, and cancels the iteration.
/// The completion handler will not be called after the iteration has been cancelled.
- (void)cancel;
/// Determine if there is more content to be browsed.
/// warning:
/// Can only be called from the handler, once the iteration has started.
- (BOOL)hasNext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSString;
@class RequestOptions;
@class IndexQuery;

/// Entry point into the Swift API.
SWIFT_CLASS("_TtC19InstantSearchClient6Client")
@interface Client : AbstractClient
/// Algolia application ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
/// Algolia API key.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Cache of already created indices.
/// This dictionary is used to avoid creating two instances to represent the same index, as it is (1) inefficient
/// and (2) potentially harmful since instances are stateful (that’s especially true of mirrored/offline indices,
/// but also of online indices because of the search cache).
/// note:
/// The values are zeroing weak references to avoid leaking memory when an index is no longer used.
@property (nonatomic, strong) NSMapTable<NSString *, id> * _Nonnull indices;
/// Queue for purely in-memory operations (no I/Os).
/// Typically used for aggregate, concurrent operations.
@property (nonatomic, strong) NSOperationQueue * _Nonnull inMemoryQueue;
/// Create a new Algolia Search client.
/// \param appID The application ID (available in your Algolia Dashboard).
///
/// \param apiKey A valid API key for the service.
///
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
/// Obtain a proxy to an Algolia index (no server call required by this method).
/// note:
/// Only one instance can exist for a given index name. Subsequent calls to this method with the same
/// index name will return the same instance, unless it has already been released.
/// \param indexName The name of the index.
///
///
/// returns:
/// A proxy to the specified index.
- (Index * _Nonnull)indexWithName:(NSString * _Nonnull)indexName SWIFT_WARN_UNUSED_RESULT;
/// List existing indexes.
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)listIndexesWithRequestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)listIndexes:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete an index.
/// \param name Name of the index to delete.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)deleteIndexWithName:(NSString * _Nonnull)name requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)deleteIndexWithName:(NSString * _Nonnull)name completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Move an existing index.
/// If the destination index already exists, its specific API keys will be preserved and the source index specific
/// API keys will be added.
/// \param srcIndexName Name of index to move.
///
/// \param dstIndexName The new index name.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)moveIndexFrom:(NSString * _Nonnull)srcIndexName to:(NSString * _Nonnull)dstIndexName requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)moveIndexFrom:(NSString * _Nonnull)srcIndexName to:(NSString * _Nonnull)dstIndexName completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Copy an existing index.
/// If the destination index already exists, its specific API keys will be preserved and the source index specific
/// API keys will be added.
/// \param srcIndexName Name of the index to copy.
///
/// \param dstIndexName The new index name.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)copyIndexFrom:(NSString * _Nonnull)srcIndexName to:(NSString * _Nonnull)dstIndexName requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)copyIndexFrom:(NSString * _Nonnull)srcIndexName to:(NSString * _Nonnull)dstIndexName completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Query multiple indexes with one API call.
/// \param queries List of queries.
///
/// \param strategy The strategy to use.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)multipleQueries:(NSArray<IndexQuery *> * _Nonnull)queries strategy:(NSString * _Nullable)strategy requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)multipleQueries:(NSArray<IndexQuery *> * _Nonnull)queries strategy:(NSString * _Nullable)strategy completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Batch operations.
/// \param operations List of operations.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)batchOperations:(NSArray * _Nonnull)operations requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)batchOperations:(NSArray * _Nonnull)operations completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithAppID:(NSString * _Nullable)appID apiKey:(NSString * _Nullable)apiKey readHosts:(NSArray<NSString *> * _Nonnull)readHosts writeHosts:(NSArray<NSString *> * _Nonnull)writeHosts SWIFT_UNAVAILABLE;
@end

@class LatLng;

/// A rectangle in geo coordinates.
/// Used in geo-search.
SWIFT_CLASS("_TtC19InstantSearchClient7GeoRect")
@interface GeoRect : NSObject
/// One of the rectangle’s corners (typically the northwesternmost).
@property (nonatomic, readonly, strong) LatLng * _Nonnull p1;
/// Corner opposite from <code>p1</code> (typically the southeasternmost).
@property (nonatomic, readonly, strong) LatLng * _Nonnull p2;
/// Create a geo rectangle.
/// \param p1 One of the rectangle’s corners (typically the northwesternmost).
///
/// \param p2 Corner opposite from <code>p1</code> (typically the southeasternmost).
///
- (nonnull instancetype)initWithP1:(LatLng * _Nonnull)p1 p2:(LatLng * _Nonnull)p2 OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A searchable source of data.
SWIFT_PROTOCOL("_TtP19InstantSearchClient10Searchable_")
@protocol Searchable
/// Perform a search.
/// \param query Search parameters.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)search:(Query * _Nonnull)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a search with disjunctive facets, generating as many queries as number of disjunctive facets (helper).
/// \param query The query.
///
/// \param disjunctiveFacets List of disjunctive facets.
///
/// \param refinements The current refinements, mapping facet names to a list of values.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)searchDisjunctiveFaceting:(Query * _Nonnull)query disjunctiveFacets:(NSArray<NSString *> * _Nonnull)disjunctiveFacets refinements:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)refinements requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Search for facet values.
/// This searches inside a facet’s values, optionally restricting the returned values to those contained in objects
/// matching other (regular) search criteria.
/// \param facetName Name of the facet to search. It must have been declared in the index’s
/// <code>attributesForFaceting</code> setting with the <code>searchable()</code> modifier.
///
/// \param text Text to search for in the facet’s values.
///
/// \param query An optional query to take extra search parameters into account. These parameters apply to
/// index objects like in a regular search query. Only facet values contained in the matched objects will be
/// returned.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)searchForFacetValuesOf:(NSString * _Nonnull)facetName matching:(NSString * _Nonnull)text query:(Query * _Nullable)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
@end


/// A proxy to an Algolia index.
/// note:
/// You cannot construct this class directly. Please use <code>Client.index(withName:)</code> to obtain an instance.
SWIFT_CLASS("_TtC19InstantSearchClient5Index")
@interface Index : NSObject <Searchable>
/// This index’s name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// API client used by this index.
@property (nonatomic, readonly, strong) Client * _Nonnull client;
@property (nonatomic, readonly, copy) NSString * _Nonnull urlEncodedName;
/// Create a new index proxy.
- (nonnull instancetype)initWithClient:(Client * _Nonnull)client name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Add an object to this index.
/// \param object The object to add.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)addObject:(NSDictionary<NSString *, id> * _Nonnull)object requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)addObject:(NSDictionary<NSString *, id> * _Nonnull)object completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Add an object to this index, assigning it the specified object ID.
/// If an object already exists with the same object ID, the existing object will be overwritten.
/// warning:
/// Deprecated, use addObject(_:) instead.
/// \param object The object to add.
///
/// \param objectID Identifier that you want to assign this object.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)addObject:(NSDictionary<NSString *, id> * _Nonnull)object withID:(NSString * _Nonnull)objectID requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)addObject:(NSDictionary<NSString *, id> * _Nonnull)object withID:(NSString * _Nonnull)objectID completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Add several objects to this index.
/// \param objects Objects to add.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)addObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)addObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete an object from this index.
/// \param objectID Identifier of object to delete.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)deleteObjectWithID:(NSString * _Nonnull)objectID requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)deleteObjectWithID:(NSString * _Nonnull)objectID completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete several objects from this index.
/// \param objectIDs Identifiers of objects to delete.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)deleteObjectsWithIDs:(NSArray<NSString *> * _Nonnull)objectIDs requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)deleteObjectsWithIDs:(NSArray<NSString *> * _Nonnull)objectIDs completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Get an object from this index, optionally restricting the retrieved content.
/// \param objectID Identifier of the object to retrieve.
///
/// \param attributesToRetrieve List of attributes to retrieve. If <code>nil</code>, all attributes are retrieved.
/// If one of the elements is <code>"*"</code>, all attributes are retrieved.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)getObjectWithID:(NSString * _Nonnull)objectID attributesToRetrieve:(NSArray<NSString *> * _Nullable)attributesToRetrieve requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)getObjectWithID:(NSString * _Nonnull)objectID completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)getObjectWithID:(NSString * _Nonnull)objectID attributesToRetrieve:(NSArray<NSString *> * _Nullable)attributesToRetrieve completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Get several objects from this index, optionally restricting the retrieved content.
/// \param objectIDs Identifiers of objects to retrieve.
///
/// \param attributesToRetrieve List of attributes to retrieve. If <code>nil</code>, all attributes are retrieved.
/// If one of the elements is <code>"*"</code>, all attributes are retrieved.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)getObjectsWithIDs:(NSArray<NSString *> * _Nonnull)objectIDs attributesToRetrieve:(NSArray<NSString *> * _Nullable)attributesToRetrieve requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)getObjectsWithIDs:(NSArray<NSString *> * _Nonnull)objectIDs completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)getObjectsWithIDs:(NSArray<NSString *> * _Nonnull)objectIDs attributesToRetrieve:(NSArray<NSString *> * _Nullable)attributesToRetrieve completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObject:(NSDictionary<NSString *, id> * _Nonnull)partialObject withID:(NSString * _Nonnull)objectID completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObject:(NSDictionary<NSString *, id> * _Nonnull)partialObject withID:(NSString * _Nonnull)objectID createIfNotExists:(BOOL)createIfNotExists completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObject:(NSDictionary<NSString *, id> * _Nonnull)partialObject withID:(NSString * _Nonnull)objectID createIfNotExists:(BOOL)createIfNotExists requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects createIfNotExists:(BOOL)createIfNotExists completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)partialUpdateObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects createIfNotExists:(BOOL)createIfNotExists requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Update an object.
/// \param object New version of the object to update. Must contain an <code>objectID</code> attribute.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)saveObject:(NSDictionary<NSString *, id> * _Nonnull)object requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)saveObject:(NSDictionary<NSString *, id> * _Nonnull)object completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Update several objects.
/// \param objects New versions of the objects to update. Each one must contain an <code>objectID</code> attribute.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)saveObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)saveObjects:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)objects completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Search this index.
/// \param query Search parameters.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)search:(Query * _Nonnull)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)search:(Query * _Nonnull)query completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Search for facet values.
/// This searches inside a facet’s values, optionally restricting the returned values to those contained in objects
/// matching other (regular) search criteria.
/// \param facetName Name of the facet to search. It must have been declared in the index’s
/// <code>attributesForFaceting</code> setting with the <code>searchable()</code> modifier.
///
/// \param text Text to search for in the facet’s values.
///
/// \param query An optional query to take extra search parameters into account. These parameters apply to
/// index objects like in a regular search query. Only facet values contained in the matched objects will be
/// returned.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)searchForFacetValuesOf:(NSString * _Nonnull)facetName matching:(NSString * _Nonnull)text query:(Query * _Nullable)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)searchForFacetValuesOf:(NSString * _Nonnull)facetName matching:(NSString * _Nonnull)text query:(Query * _Nullable)query completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Get this index’s settings.
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)getSettingsWithRequestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)getSettings:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)setSettings:(NSDictionary<NSString *, id> * _Nonnull)settings completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)setSettings:(NSDictionary<NSString *, id> * _Nonnull)settings forwardToReplicas:(BOOL)forwardToReplicas completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete the index content without removing settings and index specific API keys.
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)clearIndexWithRequestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)clearIndex:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Batch operations.
/// \param operations The array of actions.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)batchOperations:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)operations requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)batchOperations:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)operations completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Browse all index content (initial call).
/// This method should be called once to initiate a browse. It will return the first page of results and a cursor,
/// unless the end of the index has been reached. To retrieve subsequent pages, call <code>browseFrom</code> with that cursor.
/// \param query The query parameters for the browse.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)browseWithQuery:(Query * _Nonnull)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)browseWithQuery:(Query * _Nonnull)query completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Browse the index from a cursor.
/// This method should be called after an initial call to <code>browse()</code>. It returns a cursor, unless the end of the
/// index has been reached.
/// \param cursor The cursor of the next page to retrieve
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)browseFromCursor:(NSString * _Nonnull)cursor requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)browseFromCursor:(NSString * _Nonnull)cursor completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Wait until the publication of a task on the server (helper).
/// All server tasks are asynchronous. This method helps you check that a task is published.
/// \param taskID Identifier of the task (as returned by the server).
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)waitTaskWithID:(NSInteger)taskID requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)waitTaskWithID:(NSInteger)taskID completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete all objects matching a query.
/// \param query The query that objects to delete must match.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)deleteBy:(Query * _Nonnull)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)deleteBy:(Query * _Nonnull)query completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Delete all objects matching a query (helper).
/// warning:
/// Deprecated, use deleteBy instead.
/// \param query The query that objects to delete must match.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)deleteByQuery:(Query * _Nonnull)query requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)deleteByQuery:(Query * _Nonnull)query completionHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a search with disjunctive facets, generating as many queries as number of disjunctive facets (helper).
/// \param query The query.
///
/// \param disjunctiveFacets List of disjunctive facets.
///
/// \param refinements The current refinements, mapping facet names to a list of values.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)searchDisjunctiveFaceting:(Query * _Nonnull)query disjunctiveFacets:(NSArray<NSString *> * _Nonnull)disjunctiveFacets refinements:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)refinements requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)searchDisjunctiveFaceting:(Query * _Nonnull)query disjunctiveFacets:(NSArray<NSString *> * _Nonnull)disjunctiveFacets refinements:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)refinements completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Run multiple queries on this index.
/// This method is a variant of <code>Client.multipleQueries(...)</code> where the targeted index is always the receiver.
/// \param queries The queries to run.
///
/// \param requestOptions Request-specific options.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)multipleQueries:(NSArray<Query *> * _Nonnull)queries strategy:(NSString * _Nullable)strategy requestOptions:(RequestOptions * _Nullable)requestOptions completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (NSOperation * _Nonnull)multipleQueries:(NSArray<Query *> * _Nonnull)queries strategy:(NSString * _Nullable)strategy completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Whether the search cache is enabled on this index. Default: <code>false</code>.
@property (nonatomic) BOOL searchCacheEnabled;
/// Expiration delay for items in the search cache. Default: 2 minutes.
/// note:
/// The delay is a minimum threshold. Items may survive longer in cache.
@property (nonatomic) NSTimeInterval searchCacheExpiringTimeInterval;
/// Clear the search cache.
- (void)clearSearchCache;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A search query targeting a specific index.
SWIFT_CLASS("_TtC19InstantSearchClient10IndexQuery")
@interface IndexQuery : NSObject
/// Name of the targeted index.
@property (nonatomic, readonly, copy) NSString * _Nonnull indexName;
/// Query.
@property (nonatomic, readonly, strong) Query * _Nonnull query;
/// Create an index query from an index name and a query.
- (nonnull instancetype)initWithIndexName:(NSString * _Nonnull)indexName query:(Query * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
/// Create an index query from an <code>Index</code> instance and a query.
- (nonnull instancetype)initWithIndex:(Index * _Nonnull)index query:(Query * _Nonnull)query OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A pair of (latitude, longitude).
/// Used in geo-search.
SWIFT_CLASS("_TtC19InstantSearchClient6LatLng")
@interface LatLng : NSObject
/// Latitude.
@property (nonatomic, readonly) double lat;
/// Longitude.
@property (nonatomic, readonly) double lng;
/// Create a geo location.
/// \param lat Latitude.
///
/// \param lng Longitude.
///
- (nonnull instancetype)initWithLat:(double)lat lng:(double)lng OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A version of a software library.
/// Used to construct the <code>User-Agent</code> header.
SWIFT_CLASS("_TtC19InstantSearchClient14LibraryVersion")
@interface LibraryVersion : NSObject
/// Library name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Version string.
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





@class PlacesQuery;

/// Client for <a href="https://community.algolia.com/places/">Algolia Places</a>.
SWIFT_CLASS("_TtC19InstantSearchClient12PlacesClient")
@interface PlacesClient : AbstractClient
/// Algolia application ID.
@property (nonatomic, readonly, copy) NSString * _Nullable appID;
/// Algolia API key.
@property (nonatomic, copy) NSString * _Nullable apiKey;
/// Create a new authenticated Algolia Places client.
/// \param appID The application ID (available in your Algolia Dashboard).
///
/// \param apiKey A valid API key for the service.
///
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID apiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
/// Create a new unauthenticated Algolia Places client.
/// note:
/// The rate limit for the unauthenticated API is significantly lower than for the authenticated API.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
/// Search for places.
/// \param params Search parameters.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)search:(PlacesQuery * _Nonnull)params completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// Get a place by its objectID.
/// \param objectID Identifier of the object to retrieve.
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)getObjectWithID:(NSString * _Nonnull)objectID completionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)initWithAppID:(NSString * _Nullable)appID apiKey:(NSString * _Nullable)apiKey readHosts:(NSArray<NSString *> * _Nonnull)readHosts writeHosts:(NSArray<NSString *> * _Nonnull)writeHosts SWIFT_UNAVAILABLE;
@end

@class NSNumber;

/// Search parameters for Algolia Places.
/// seealso:
/// <code>PlacesClient.search(...)</code>
SWIFT_CLASS("_TtC19InstantSearchClient11PlacesQuery")
@interface PlacesQuery : AbstractQuery
/// Construct a query with the specified full text query.
- (nonnull instancetype)initWithQuery:(NSString * _Nullable)query;
/// Clone an existing query.
- (nonnull instancetype)initWithCopy:(PlacesQuery * _Nonnull)copy;
/// Support for <code>NSCopying</code>.
/// note:
/// Primarily intended for Objective-C use. Swift coders should use <code>init(copy:)</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
/// Parse a query from a URL query string.
+ (PlacesQuery * _Nonnull)parse:(NSString * _Nonnull)queryString SWIFT_WARN_UNUSED_RESULT;
/// Full text query.
@property (nonatomic, copy) NSString * _Nullable query;
/// If specified, restrict the search results to a single language.
/// You can pass two letters country codes (<a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>).
@property (nonatomic, copy) NSString * _Nullable language;
/// If specified, restrict the search results to a specific list of countries.
/// You can pass two letters country codes (<a href="https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements">ISO 3166-1</a>).
/// Default: Search on the whole planet.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable countries;
/// Force to <em>first</em> search around a specific latitude/longitude.
/// The default is to search around the location of the user determined via his IP address (geoip).
@property (nonatomic, strong) LatLng * _Nullable aroundLatLng;
/// String marking the beginning of highlighted text in the response.
/// Default: <code><em></code>.
@property (nonatomic, copy) NSString * _Nullable highlightPreTag;
/// String marking the end of highlighted text in the response.
/// Default: <code></em></code>.
@property (nonatomic, copy) NSString * _Nullable highlightPostTag;
@property (nonatomic, strong) NSNumber * _Nullable hitsPerPage;
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic, strong) NSNumber * _Nullable aroundLatLngViaIP;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSNumber * _Nonnull aroundRadiusAll;)
+ (NSNumber * _Nonnull)aroundRadiusAll SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSNumber * _Nullable aroundRadius;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters OBJC_DESIGNATED_INITIALIZER;
@end


/// Describes all parameters of a search query.
/// There are two ways to access parameters:
/// <ol>
///   <li>
///     Using the high-level, <em>typed properties</em> for individual parameters (recommended).
///   </li>
///   <li>
///     Using the low-level, <em>untyped accessors</em> <code>parameter(withName:)</code> and <code>setParameter(withName:to:)</code> or (better)
///     the <em>subscript operator</em>. Use this approach if the parameter you wish to set is not supported by this class.
///   </li>
/// </ol>
/// warning:
/// All parameters are <em>optional</em>. When a parameter is <code>nil</code>, the API applies a default value.
SWIFT_CLASS("_TtC19InstantSearchClient5Query")
@interface Query : AbstractQuery
/// The instant-search query string, all words of the query are interpreted as prefixes (for example “John Mc” will
/// match “John Mccamey” and “Johnathan Mccamey”). If no query parameter is set, retrieves all objects.
@property (nonatomic, copy) NSString * _Nullable query;
/// List of attributes you want to use for textual search (must be a subset of the <code>searchableAttributes</code> index setting).
/// Attributes are separated with a comma (for example “name,address” ), you can also use a JSON string array
/// encoding (for example encodeURIComponent(’[“name”,“address”]’) ). By default, all attributes specified in
/// <code>searchableAttributes</code> settings are used to search.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable restrictSearchableAttributes;
/// List of contexts for which rules are enabled.
/// Contextual rules matching any of these contexts are eligible, as well as generic rules.
/// When empty, only generic rules are eligible.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable ruleContexts;
/// If set, tag your query with the specified identifiers. Tags can then be used in the Analytics to analyze a
/// subset of searches only.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable analyticsTags;
/// Specify a list of words that should be considered as optional when found in the query. This list will be
/// appended to the one defined in your index settings.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable optionalWords;
/// List of attributes on which you want to disable typo tolerance (must be a subset of the <code>searchableAttributes</code>
/// index setting).
@property (nonatomic, copy) NSArray<NSString *> * _Nullable disableTypoToleranceOnAttributes;
/// List of attributes on which you want to disable computation of the <code>exact</code> ranking criterion
/// The list must be a subset of the <code>searchableAttributes</code> index setting.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable disableExactOnAttributes;
/// List of object attributes you want to retrieve (let you minimize the answer size). You can also use <code>*</code> to
/// retrieve all values when an <code>attributesToRetrieve</code> setting is specified for your index.
/// By default all attributes are retrieved.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable attributesToRetrieve;
/// List of attributes you want to highlight according to the query. If an attribute has no match for the query,
/// the raw value is returned. By default all indexed text attributes are highlighted. You can use <code>*</code> if you want
/// to highlight all textual attributes. Numerical attributes are not highlighted. A <code>matchLevel</code> is returned for
/// each highlighted attribute and can contain:
/// <ul>
///   <li>
///     <code>full</code>: if all the query terms were found in the attribute
///   </li>
///   <li>
///     <code>partial</code>: if only some of the query terms were found
///   </li>
///   <li>
///     <code>none</code>: if none of the query terms were found
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable attributesToHighlight;
/// List of attributes to snippet alongside the number of words to return (syntax is <code>attributeName:nbWords</code>).
/// By default no snippet is computed.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable attributesToSnippet;
/// Specify the string that is inserted before the highlighted parts in the query result (defaults to <code><em></code>).
@property (nonatomic, copy) NSString * _Nullable highlightPreTag;
/// Specify the string that is inserted after the highlighted parts in the query result (defaults to <code></em></code>)
@property (nonatomic, copy) NSString * _Nullable highlightPostTag;
/// String used as an ellipsis indicator when a snippet is truncated (defaults to empty).
@property (nonatomic, copy) NSString * _Nullable snippetEllipsisText;
/// Filter on numeric attributes.
@property (nonatomic, copy) NSArray * _Nullable numericFilters;
/// Filter the query by a set of tags.
@property (nonatomic, copy) NSArray * _Nullable tagFilters;
/// List of object attributes that you want to use for faceting. Only attributes that have been added in
/// <code>attributesForFaceting</code> index setting can be used in this parameter. You can also use <code>*</code> to perform faceting
/// on all attributes specified in <code>attributesForFaceting</code>. If the number of results is important, the count can
/// be approximate, the attribute <code>exhaustiveFacetsCount</code> in the response is true when the count is exact.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable facets;
/// Filter the query by a list of facets.
@property (nonatomic, copy) NSArray * _Nullable facetFilters;
/// Filter the query with numeric, facet or/and tag filters.
/// The syntax is a SQL like syntax, you can use the OR and AND keywords. The syntax for the underlying numeric,
/// facet and tag filters is the same than in the other filters:
/// \code
/// available=1 AND (category:Book OR NOT category:Ebook) AND _publicationdate: 1441745506 TO 1441755506
/// AND inStock > 0 AND author:"John Doe"
///
/// \endcodeThe list of keywords is:
/// <ul>
///   <li>
///     <code>OR</code>: create a disjunctive filter between two filters.
///   </li>
///   <li>
///     <code>AND</code>: create a conjunctive filter between two filters.
///   </li>
///   <li>
///     <code>TO</code>: used to specify a range for a numeric filter.
///   </li>
///   <li>
///     <code>NOT</code>: used to negate a filter. The syntax with the <code>-</code> isn’t allowed.
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable filters;
/// Search for entries around a given latitude/longitude. You can specify the maximum distance in meters with the
/// <code>aroundRadius</code> parameter but we recommend to let it unset and let our automatic radius computation adapt it
/// depending of the density of the are. At indexing, you should specify the geo-location of an object with the
/// <code>_geoloc</code> attribute (in the form <code>"_geoloc":{"lat":48.853409, "lng":2.348800}</code> or
/// <code>"_geoloc":[{"lat":48.853409, "lng":2.348800},{"lat":48.547456, "lng":2.972075}]</code> if you have several
/// geo-locations in your record).
@property (nonatomic, strong) LatLng * _Nullable aroundLatLng;
/// Search for entries inside a given area defined by the two extreme points of a rectangle.
/// You can use several bounding boxes (OR) by passing more than 1 value.
@property (nonatomic, copy) NSArray<GeoRect *> * _Nullable insideBoundingBox;
/// Search entries inside a given area defined by a union of polygons.
/// Each polygon must be defined by a minimum of 3 points.
@property (nonatomic, copy) NSArray<NSArray<LatLng *> *> * _Nullable insidePolygon;
/// Specify filters for ranking purposes, to rank higher records that contain the filters
@property (nonatomic, copy) NSArray<NSString *> * _Nullable optionalFilters;
/// Choose which fields the response will contain. Applies to search and browse queries.
/// By default, all fields are returned. If this parameter is specified, only the fields explicitly listed will be
/// returned, unless <code>*</code> is used, in which case all fields are returned. Specifying an empty list or unknown field
/// names is an error.
/// This parameter is mainly intended to limit the response size. For example, for complex queries, echoing of
/// request parameters in the response’s params field can be undesirable.
/// Some fields cannot be filtered out:
/// <ul>
///   <li>
///     <code>warning</code> message
///   </li>
///   <li>
///     <code>cursor</code> in browse queries
///   </li>
///   <li>
///     fields triggered explicitly via <code>getRankingInfo</code>
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable responseFields;
/// Construct a query with the specified full text query.
- (nonnull instancetype)initWithQuery:(NSString * _Nullable)query;
/// Clone an existing query.
- (nonnull instancetype)initWithCopy:(Query * _Nonnull)copy;
/// Support for <code>NSCopying</code>.
/// note:
/// Primarily intended for Objective-C use. Swift coders should use <code>init(copy:)</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
/// Parse a query from a URL query string.
+ (Query * _Nonnull)parse:(NSString * _Nonnull)queryString SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable queryType;
@property (nonatomic, copy) NSString * _Nullable typoTolerance;
@property (nonatomic, strong) NSNumber * _Nullable minWordSizefor1Typo;
@property (nonatomic, strong) NSNumber * _Nullable minWordSizefor2Typos;
@property (nonatomic, strong) NSNumber * _Nullable allowTyposOnNumericTokens;
@property (nonatomic) id _Nullable ignorePlurals;
@property (nonatomic, strong) NSNumber * _Nullable enableRules;
@property (nonatomic, strong) NSNumber * _Nullable advancedSyntax;
@property (nonatomic, strong) NSNumber * _Nullable analytics;
@property (nonatomic, strong) NSNumber * _Nullable clickAnalytics;
@property (nonatomic, strong) NSNumber * _Nullable synonyms;
@property (nonatomic, strong) NSNumber * _Nullable replaceSynonymsInHighlight;
@property (nonatomic, strong) NSNumber * _Nullable sumOrFiltersScores;
@property (nonatomic, strong) NSNumber * _Nullable minProximity;
@property (nonatomic, copy) NSString * _Nullable removeWordsIfNoResults;
@property (nonatomic) id _Nullable removeStopWords;
@property (nonatomic, copy) NSString * _Nullable exactOnSingleWordQuery;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable alternativesAsExact;
@property (nonatomic, strong) NSNumber * _Nullable page;
@property (nonatomic, strong) NSNumber * _Nullable hitsPerPage;
@property (nonatomic, strong) NSNumber * _Nullable offset;
@property (nonatomic, strong) NSNumber * _Nullable length;
@property (nonatomic, strong) NSNumber * _Nullable getRankingInfo;
@property (nonatomic, strong) NSNumber * _Nullable restrictHighlightAndSnippetArrays;
@property (nonatomic, strong) NSNumber * _Nullable distinct;
@property (nonatomic, strong) NSNumber * _Nullable maxValuesPerFacet;
@property (nonatomic, strong) NSNumber * _Nullable aroundLatLngViaIP;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSNumber * _Nonnull aroundRadiusAll;)
+ (NSNumber * _Nonnull)aroundRadiusAll SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) NSNumber * _Nullable aroundRadius;
@property (nonatomic, strong) NSNumber * _Nullable aroundPrecision;
@property (nonatomic, strong) NSNumber * _Nullable minimumAroundRadius;
@property (nonatomic, strong) NSNumber * _Nullable facetingAfterDistinct;
@property (nonatomic, strong) NSNumber * _Nullable maxFacetHits;
@property (nonatomic, strong) NSNumber * _Nullable percentileComputation;
@property (nonatomic, copy) NSString * _Nullable sortFacetValuesBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters OBJC_DESIGNATED_INITIALIZER;
@end


/// An API request.
/// This class encapsulates a sequence of normally one (nominal case), potentially many (in case of retry) network
/// calls into a high-level operation. This operation can be cancelled by the user.
SWIFT_CLASS("_TtC19InstantSearchClient7Request")
@interface Request : AsyncOperationWithCompletion
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Start this request.
- (void)start;
/// Cancel this request.
/// The completion block (if any was provided) will not be called after a request has been cancelled.
/// WARNING: Cancelling a request may or may not cancel the underlying network call, depending how late the
/// cancellation happens. In other words, a cancelled request may have already been executed by the server. In any
/// case, cancelling never carries “undo” semantics.
- (void)cancel;
@end


/// Per-request options.
/// This class allows specifying options at the request level, overriding default options at the <code>Client</code> level.
/// note:
/// These are reserved for advanced use cases. In most situations, they shouldn’t be needed.
SWIFT_CLASS("_TtC19InstantSearchClient14RequestOptions")
@interface RequestOptions : NSObject <NSCopying>
/// HTTP headers, as untyped values.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
/// URL parameters, as untyped values.
/// These will go into the query string part of the URL (after the question mark).
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull urlParameters;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Construct request options.
/// <ul>
///   <li>
///     param headers: HTTP headers (default: empty).
///   </li>
///   <li>
///     param urlParameters: URL parameters (default: empty).
///   </li>
/// </ul>
- (nonnull instancetype)initWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers urlParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)urlParameters OBJC_DESIGNATED_INITIALIZER;
/// Support for <code>NSCopying</code>.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
